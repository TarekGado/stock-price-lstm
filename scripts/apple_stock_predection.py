# -*- coding: utf-8 -*-
"""Apple_Stock_predection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ne3LjYxHnw0-QS9OH-NmOg-3z3DQgWZp
"""

import yfinance as yf
import pandas as pd
from datetime import datetime
from sklearn.preprocessing import StandardScaler, MinMaxScaler
import numpy as np
import tensorflow as tf
from tensorflow.keras import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.metrics import mean_absolute_error, mean_squared_error
import pandas_datareader.data as web
from pandas_datareader.data import DataReader

start = '2022-08-30'
end = datetime.today().strftime('%Y-%m-%d')
df = yf.download("AAPL",start=start, end=end)
df = df.rename(columns=str.title)  # Close, High, Low, Open, Volume
df.index = pd.to_datetime(df.index)

df.tail()

df['EMA_20'] = df['Close'].ewm(span=20, adjust=False).mean()



!pip install ta
import ta
df['RSI'] = ta.momentum.RSIIndicator(close=df["Close"]['Aapl'], window=14).rsi()

# GDP (Quarterly)
gdp = web.DataReader('GDP', 'fred', start, end)

# CPI (Monthly)
cpi = web.DataReader('CPIAUCSL', 'fred', start, end)

# Unemployment Rate (Monthly)
unrate = web.DataReader('UNRATE', 'fred', start, end)

# Federal Funds Rate (Monthly)
fedfunds = web.DataReader('FEDFUNDS', 'fred', start, end)

gdp_daily = gdp.asfreq("D").ffill()
cpi_daily = cpi.asfreq("D").ffill()
unrate_daily = unrate.asfreq("D").ffill()
fedfunds_daily = fedfunds.asfreq("D").ffill()

# NASDAQ Index
nasdaq = yf.download("^IXIC", start=start, end=end)[["Close"]].rename(columns={"Close": "NASDAQ"})

# VIX (Volatility Index)
vix = yf.download("^VIX", start=start, end=end)[["Close"]].rename(columns={"Close": "VIX"})

df.head()

df.columns

#df_scaled.head()

df.columns = df.columns.droplevel(1)

df = df.join([gdp_daily, cpi_daily, unrate_daily, fedfunds_daily, nasdaq, vix], how="left")

# Rename columns
df = df.rename(columns={
    "GDP": "GDP",
    "CPIAUCSL": "CPI",
    "UNRATE": "Unemployment",
    "FEDFUNDS": "InterestRate",
    ("NASDAQ", "^IXIC"): "NASDAQ",
    ("VIX", "^VIX"): "VIX"
})

# Forward fill in case of NA
df = df.ffill()

scaler = StandardScaler()
scaled_features = scaler.fit_transform(df[["GDP","CPI","Unemployment","InterestRate","NASDAQ","VIX"]])
scaled_df = pd.DataFrame(scaled_features, index=df.index, columns=["GDP","CPI","Unemployment","InterestRate","NASDAQ","VIX"])

# Merge back with stock features
df_scaled = df.join(scaled_df, rsuffix="_scaled")

feat_cols = ["Close", "Volume", "EMA_20", "RSI",
            "GDP_scaled", "CPI_scaled", "Unemployment_scaled",
            "InterestRate_scaled", "NASDAQ_scaled", "VIX_scaled"]

df_scaled = df_scaled[feat_cols].dropna().copy()

df_scaled["Target"] = df_scaled["Close"].shift(-1)

df_scaled = df_scaled.dropna()

n = len(df_scaled)
train_end = int(n * 0.70)
val_end   = int(n * 0.85)
df_scaled.reset_index(inplace=True)
dates_train, train_df =df_scaled['Date'].iloc[:train_end], df_scaled.iloc[:train_end]
dates_val, val_df   = df_scaled['Date'].iloc[train_end:val_end], df_scaled.iloc[train_end:val_end]
dates_test, test_df  =df_scaled['Date'].iloc[val_end:], df_scaled.iloc[val_end:]
df_scaled.set_index('Date', inplace=True)

X_scaler = StandardScaler()
y_scaler = MinMaxScaler()

X_train = X_scaler.fit_transform(train_df[feat_cols])
X_val   = X_scaler.transform(val_df[feat_cols])
X_test  = X_scaler.transform(test_df[feat_cols])

y_train = y_scaler.fit_transform(train_df[["Target"]])
y_val   = y_scaler.transform(val_df[["Target"]])
y_test  = y_scaler.transform(test_df[["Target"]])

def make_windows(X, y, lookback, horizon):
    Xs, ys = [], []
    for i in range(len(X) - lookback - horizon + 1):
        Xs.append(X[i:i+lookback])
        ys.append(y[i+lookback + horizon - 1])
    return np.array(Xs), np.array(ys)

lookback = 60
horizon  = 1

X_train_seq, y_train_seq = make_windows(X_train, y_train, lookback, horizon)
X_val_seq,   y_val_seq   = make_windows(X_val,   y_val,   lookback, horizon)
X_test_seq,  y_test_seq  = make_windows(X_test,  y_test,  lookback, horizon)

model = Sequential([
    LSTM(64, return_sequences=False, input_shape=(lookback,  len(feat_cols))),
    Dropout(0.2),
    Dense(32, activation="relu"),
    Dense(32, activation="relu"),
    Dense(1)
])

len(df.columns)

model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=1e-3),
              loss="mse")

es = EarlyStopping(monitor="val_loss", patience=20, restore_best_weights=True)

#print(X_val_seq.shape)

y_test_seq.shape

history = model.fit(
    X_train_seq, y_train_seq,
    validation_data=(X_val_seq, y_val_seq),
    epochs=100,
    batch_size=64,
    callbacks=[es],
    verbose=1
)

y_pred_test_scaled = model.predict(X_test_seq)
# Inverse-scale to price
y_pred_test = y_scaler.inverse_transform(y_pred_test_scaled)
y_true_test = y_scaler.inverse_transform(y_test_seq)

y_true = y_true_test.ravel()  # flatten (n,1) -> (n,)
y_pred = y_pred_test.ravel()

mae = mean_absolute_error(y_true, y_pred)
mse = mean_squared_error(y_true, y_pred)
rmse = np.sqrt(mse)
mape = np.mean(np.abs((y_true - y_pred) / y_true)) * 100  # safe for prices (non-zero)

print(f"Test MAE:  {mae:,.4f}")
print(f"Test RMSE: {rmse:,.4f}")
print(f"Test MAPE: {mape:,.2f}%")

y_pred_test.shape

# Predict on validation windows
y_pred_train_scaled = model.predict(X_train_seq)
y_pred_train = y_scaler.inverse_transform(y_pred_train_scaled)
y_true_train = y_scaler.inverse_transform(y_train_seq)
# dates_val should come from the raw (pre-window) val_df index
dates_train = train_df['Date']

offset = lookback + horizon - 1
train_dates_aligned = dates_train.iloc[offset:]


y_true_train_line = y_true_train.ravel()
y_pred_train_line = y_pred_train.ravel()
import matplotlib.pyplot as plt

plt.figure(figsize=(12,5))
plt.plot(train_dates_aligned, y_true_train_line, label="Training Observations")
plt.plot(train_dates_aligned, y_pred_train_line, label="Training Predictions")
plt.title("Training: next-day Close")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.tight_layout()
plt.show()

# Predict on validation windows
y_pred_val_scaled = model.predict(X_val_seq)
y_pred_val = y_scaler.inverse_transform(y_pred_val_scaled)
y_true_val = y_scaler.inverse_transform(y_val_seq)
# dates_val should come from the raw (pre-window) val_df index
dates_val = val_df['Date']

offset = lookback + horizon - 1
val_dates_aligned = dates_val.iloc[offset:]


y_true_val_line = y_true_val.ravel()
y_pred_val_line = y_pred_val.ravel()
import matplotlib.pyplot as plt

plt.figure(figsize=(12,5))
plt.plot(val_dates_aligned, y_true_val_line, label="Validation Observations")
plt.plot(val_dates_aligned, y_pred_val_line, label="Validation Predictions")
plt.title("Validation: next-day Close")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.tight_layout()
plt.show()

# dates_test is a Series you saved before windowing
offset = lookback + horizon - 1
test_dates_aligned = dates_test.iloc[offset:].to_numpy()  # same length as y_test_seq

y_true_line = y_true_test.ravel()
y_pred_line = y_pred_test.ravel()

import matplotlib.pyplot as plt
plt.figure(figsize=(12,5))
plt.plot(test_dates_aligned, y_true_line, label="Test Observations")
plt.plot(test_dates_aligned, y_pred_line, label="Test Predictions")
plt.legend()
plt.tight_layout()
plt.show()

